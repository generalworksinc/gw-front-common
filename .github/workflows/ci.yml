name: CI

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --no-save

      - name: Lint (Biome)
        run: bun run lint

      - name: Run tests with coverage
        env:
          COVER_PATH: ${{ runner.temp }}/coverage.txt
        run: bun test --coverage | tee "$COVER_PATH" || true

      # - name: JSR dry-run (allow slow types)
      #   run: bunx --yes jsr publish --dry-run --allow-slow-types

      - name: Enforce coverage threshold >= 90%
        shell: bash
        env:
          COVER_PATH: ${{ runner.temp }}/coverage.txt
        run: |
          set -euo pipefail
          SUMMARY=$(grep '^All files' "$COVER_PATH" || true)
          if [ -n "$SUMMARY" ]; then
            FUNCS=$(echo "$SUMMARY" | awk -F '|' '{gsub(/ /, "", $2); print $2}')
            LINES=$(echo "$SUMMARY" | awk -F '|' '{gsub(/ /, "", $3); print $3}')
            echo "Coverage summary: Funcs=$FUNCS Lines=$LINES"
            FUNCS_INT=${FUNCS%.*}
            LINES_INT=${LINES%.*}
            if [ -z "$FUNCS_INT" ] || [ -z "$LINES_INT" ]; then
              echo "Failed to parse coverage summary." >&2
              exit 1
            fi
            if [ "${FUNCS_INT}" -lt 90 ] || [ "${LINES_INT}" -lt 90 ]; then
              echo "Coverage below threshold 90%" >&2
              exit 1
            fi
          else
            echo "Coverage summary not found. Falling back to per-file minimum check." >&2
            # 取りうる行から3列目（% Lines）を抽出し、最小値を評価
            MIN=100
            while IFS= read -r line; do
              PCT=$(echo "$line" | awk -F '|' '{gsub(/ /, "", $3); print $3}')
              PCT_INT=${PCT%.*}
              if [ -n "$PCT_INT" ] && [ "$PCT_INT" -lt "$MIN" ]; then
                MIN=$PCT_INT
              fi
            done < <(grep -E '^ [^|]+\| +[0-9]+\.[0-9]+ +\| +[0-9]+\.[0-9]+' "$COVER_PATH" || true)
            echo "Per-file minimum %Lines=$MIN"
            if [ "$MIN" -lt 90 ]; then
              echo "Coverage below threshold 90% (per-file minimum)" >&2
              exit 1
            fi
          fi

      - name: Remove temp coverage file (prevent dirty tree)
        run: rm -f coverage.txt || true
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Ensure jq is available
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y jq
          fi
      - name: Detect version change
        id: detect
        run: |
          set -e
          curr=$(jq -r .version package.json)
          echo "Current version: $curr"
          if git show HEAD^:package.json >/dev/null 2>&1; then
            prev=$(git show HEAD^:package.json | jq -r .version)
            echo "Previous version: $prev"
          else
            prev=""
          fi
          if [ "$curr" != "$prev" ] && [ -n "$curr" ]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
            echo "version=$curr" >> "$GITHUB_OUTPUT"
          else
            echo "changed=false" >> "$GITHUB_OUTPUT"
          fi
      - name: Create GitHub Release
        if: steps.detect.outputs.changed == 'true'
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ steps.detect.outputs.version }}
          name: v${{ steps.detect.outputs.version }}
          generateReleaseNotes: true
          allowUpdates: true
  #   name: Publish to JSR (main branch)
  #   needs: test
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
  #   runs-on: ubuntu-latest
  #   permissions:
  #     id-token: write
  #     contents: read
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Setup Bun
  #       uses: oven-sh/setup-bun@v2
  #       with:
  #         bun-version: latest

  #     - name: Install dependencies
  #       run: bun install --no-save

  #     - name: Build library (CSR + SSR)
  #       run: bun run build

  #     - name: Publish (JSR, allow slow types)
  #       run: bunx --yes jsr publish --allow-slow-types
